{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/ColorsConstants\";\nimport Card from \"../components/ui/Card\";\nimport Title from \"../components/ui/Title\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction StartGameScreen(_ref) {\n  var onConfirmNumber = _ref.onConfirmNumber;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredNumber = _useState2[0],\n    setEnteredNumber = _useState2[1];\n  var numberInputHandler = function numberInputHandler(inputText) {\n    setEnteredNumber(inputText);\n  };\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredNumber('');\n  };\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert('Wrong Input', 'Choose the right number', [{\n        text: 'OK',\n        style: 'destructive',\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n    onConfirmNumber(chosenNumber);\n  };\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        children: \"Enter The Number\"\n      }), _jsx(TextInput, {\n        style: styles.numberInput,\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCorrect: false,\n        value: enteredNumber,\n        onChangeText: numberInputHandler\n      }), _jsxs(View, {\n        style: styles.Btncontainer,\n        children: [_jsx(View, {\n          style: styles.Btncontainers,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.Btncontainers,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        })]\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: 'center'\n  },\n  Btncontainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 10,\n    justifyContent: 'space-around'\n  },\n  Btncontainers: {\n    flex: 3\n  },\n  numberInput: {\n    height: 50,\n    fontSize: 32,\n    width: 50,\n    alignItems: 'center',\n    borderBottomColor: Colors.YellowColor,\n    borderBottomWidth: 2,\n    color: Colors.YellowColor,\n    marginVertical: 40,\n    fontWeight: \"bold\"\n  }\n});\nexport default StartGameScreen;","map":{"version":3,"names":["React","useState","TextInput","View","StyleSheet","Alert","Text","PrimaryButton","Colors","Card","Title","InstructionText","jsx","_jsx","jsxs","_jsxs","StartGameScreen","_ref","onConfirmNumber","_useState","_useState2","_slicedToArray","enteredNumber","setEnteredNumber","numberInputHandler","inputText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","alert","text","style","onPress","styles","rootContainer","children","numberInput","maxLength","keyboardType","autoCorrect","value","onChangeText","Btncontainer","Btncontainers","create","flex","marginTop","alignItems","flexDirection","paddingHorizontal","justifyContent","height","fontSize","width","borderBottomColor","YellowColor","borderBottomWidth","color","marginVertical","fontWeight"],"sources":["/Users/bilalahmad/Downloads/starting-project 2/screens/StartGameScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextInput, View, StyleSheet, Alert, Text } from 'react-native';\nimport PrimaryButton from '../components/ui/PrimaryButton';\nimport Colors from '../constants/ColorsConstants';\nimport Card from '../components/ui/Card';\nimport Title from '../components/ui/Title';\nimport InstructionText from '../components/ui/InstructionText';\nfunction StartGameScreen({ onConfirmNumber }) {\n  const [enteredNumber, setEnteredNumber] = useState('');\n\n  const numberInputHandler = (inputText) => {\n    setEnteredNumber(inputText);\n  };\n\n  const resetInputHandler = () => {\n    setEnteredNumber('');\n  };\n\n  const confirmInputHandler = () => {\n    const chosenNumber = parseInt(enteredNumber);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\n        'Wrong Input',\n        'Choose the right number',\n        [\n          {\n            text: 'OK',\n            style: 'destructive',\n            onPress: resetInputHandler,\n          },\n        ]\n      );\n      return;\n    }\n\n    onConfirmNumber(chosenNumber); // Call the prop function correctly\n  };\n\n  return (\n    <View style={styles.rootContainer}>\n        <Title>Guess My Number</Title>\n    <Card >\n        <InstructionText >Enter The Number</InstructionText>\n      <TextInput\n        style={styles.numberInput}\n        maxLength={2}\n        keyboardType='number-pad'\n        autoCorrect={false}\n        value={enteredNumber}\n        onChangeText={numberInputHandler}\n      />\n      <View style={styles.Btncontainer}>\n        <View style={styles.Btncontainers}>\n          <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\n        </View>\n        <View style={styles.Btncontainers}>\n          <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\n        </View>\n      </View>\n    </Card>\n    </View>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n    rootContainer:{\n        flex:1,\n        marginTop:100,\n        alignItems:'center'\n    },\n//     container: {\n        \n//  marginHorizontal:20,\n\n// elevation:6,//this is only for android\n// shadowColor:\"blue\",\n// shadowRadius:6,\n// shadowOpacity:3,\n// justifyContent:\"space-evenly\",\n// alignItems:'center',\n//       marginTop:36,\n//       paddingTop:100,\n//      borderRadius:8,\n//       backgroundColor:Colors.primaryColor,    \n//     },\n    Btncontainer: {\n        \n       flexDirection:'row', \n     paddingHorizontal:10,\n     justifyContent:'space-around'\n           },\n           Btncontainers: {\nflex:3, \n\n          \n                },\n    numberInput:{\nheight:50,\nfontSize:32,\nwidth:50,\n\nalignItems:'center',\nborderBottomColor:Colors.YellowColor,\nborderBottomWidth:2,\ncolor:Colors.YellowColor,\nmarginVertical:40,\nfontWeight:\"bold\",\n    },\n   \n  });\nexport default StartGameScreen"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}