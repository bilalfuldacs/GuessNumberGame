{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewBase } from \"react-native-web/dist/index\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useState } from 'react';\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport Colors from \"./constants/ColorsConstants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    useNumber = _useState2[0],\n    setUseNumbered = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    gameIsover = _useState4[0],\n    setIsGameOver = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    guessRound = _useState6[0],\n    setguessRound = _useState6[1];\n  var pickedNumberHandler = function pickedNumberHandler(pickedNumber) {\n    setUseNumbered(pickedNumber);\n    setIsGameOver(false);\n  };\n  var gameOverHandler = function gameOverHandler(numberOfRounds) {\n    setIsGameOver(true);\n    setguessRound(numberOfRounds);\n  };\n  var startNewGameHAnler = function startNewGameHAnler() {\n    setUseNumbered(null);\n    setguessRound(0);\n  };\n  var content = _jsx(StartGameScreen, {\n    onConfirmNumber: pickedNumberHandler\n  });\n  if (useNumber) {\n    content = _jsx(GameScreen, {\n      userNumber: useNumber,\n      onGameOver: gameOverHandler\n    });\n  }\n  if (gameIsover && useNumber) {\n    content = _jsx(GameOverScreen, {\n      roundNumber: guessRound,\n      useNumber: useNumber,\n      onStartNewgame: startNewGameHAnler\n    });\n  }\n  return _jsx(LinearGradient, {\n    colors: [Colors.primaryColor, Colors.YellowColor],\n    style: styles.container,\n    children: _jsx(ImageBackground, {\n      source: require(\"./assets/background.png\"),\n      resizeMode: \"cover\",\n      style: styles.container,\n      imageStyle: {\n        opacity: 0.55\n      },\n      children: _jsx(SafeAreaView, {\n        style: styles.rootScreen,\n        children: content\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  rootScreen: {\n    flex: 1\n  },\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","Text","View","ViewBase","ImageBackground","SafeAreaView","StartGameScreen","LinearGradient","useState","GameScreen","GameOverScreen","Colors","jsx","_jsx","App","_useState","_useState2","_slicedToArray","useNumber","setUseNumbered","_useState3","_useState4","gameIsover","setIsGameOver","_useState5","_useState6","guessRound","setguessRound","pickedNumberHandler","pickedNumber","gameOverHandler","numberOfRounds","startNewGameHAnler","content","onConfirmNumber","userNumber","onGameOver","roundNumber","onStartNewgame","colors","primaryColor","YellowColor","style","styles","container","children","source","require","resizeMode","imageStyle","opacity","rootScreen","create","flex"],"sources":["/Users/bilalahmad/Downloads/starting-project 2/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, ViewBase,ImageBackground,SafeAreaView } from 'react-native';\nimport StartGameScreen from './screens/StartGameScreen';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useState } from 'react';\nimport GameScreen from './screens/GameScreen';\nimport GameOverScreen from './screens/GameOverScreen';\nimport Colors from './constants/ColorsConstants';\nexport default function App() {\n  const[useNumber,setUseNumbered]=useState(null);\n  const[gameIsover,setIsGameOver]=useState(true);\n  const[guessRound,setguessRound]=useState(0);\n  const pickedNumberHandler=(pickedNumber)=>{\n    setUseNumbered(pickedNumber); setIsGameOver(false) ; \n  }\n  const gameOverHandler=(numberOfRounds)=>{\n    setIsGameOver(true);\n    setguessRound(numberOfRounds);\n  }  \n  const startNewGameHAnler=()=>{\n    setUseNumbered(null);\n\n    setguessRound(0);\n  }\n  let content = <StartGameScreen onConfirmNumber={pickedNumberHandler} />;\n\n  if (useNumber) {\n    content = <GameScreen userNumber={useNumber} onGameOver={gameOverHandler} />;}\n    if(gameIsover && useNumber){\n      content = <GameOverScreen roundNumber={guessRound} useNumber={useNumber} onStartNewgame={startNewGameHAnler} />;\n    }\n \nreturn (\n<LinearGradient\n        // Background Linear Gradient\n        colors={[Colors.primaryColor,Colors.YellowColor,]}\n        style={styles.container}\n      >\n        <ImageBackground source={require('./assets/background.png')} resizeMode='cover'\n        style={styles.container} imageStyle={{opacity:0.55}}>\n  <SafeAreaView  style={styles.rootScreen}>{content}</SafeAreaView>\n    </ImageBackground>\n\n    </LinearGradient>\n  );\n}\n\nconst styles = StyleSheet.create({\n  rootScreen:{flex:1},\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,SACXC,QAAQ;AAAA,OAAAC,eAAA;AAAA,OAAAC,YAAA;AACzC,OAAOC,eAAe;AACtB,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU;AACjB,OAAOC,cAAc;AACrB,OAAOC,MAAM;AAAoC,SAAAC,GAAA,IAAAC,IAAA;AACjD,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAgCP,QAAQ,CAAC,IAAI,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxCG,SAAS,GAAAF,UAAA;IAACG,cAAc,GAAAH,UAAA;EAC9B,IAAAI,UAAA,GAAgCZ,QAAQ,CAAC,IAAI,CAAC;IAAAa,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAxCE,UAAU,GAAAD,UAAA;IAACE,aAAa,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAAgChB,QAAQ,CAAC,CAAC,CAAC;IAAAiB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAArCE,UAAU,GAAAD,UAAA;IAACE,aAAa,GAAAF,UAAA;EAC9B,IAAMG,mBAAmB,GAAC,SAApBA,mBAAmBA,CAAEC,YAAY,EAAG;IACxCV,cAAc,CAACU,YAAY,CAAC;IAAEN,aAAa,CAAC,KAAK,CAAC;EACpD,CAAC;EACD,IAAMO,eAAe,GAAC,SAAhBA,eAAeA,CAAEC,cAAc,EAAG;IACtCR,aAAa,CAAC,IAAI,CAAC;IACnBI,aAAa,CAACI,cAAc,CAAC;EAC/B,CAAC;EACD,IAAMC,kBAAkB,GAAC,SAAnBA,kBAAkBA,CAAA,EAAK;IAC3Bb,cAAc,CAAC,IAAI,CAAC;IAEpBQ,aAAa,CAAC,CAAC,CAAC;EAClB,CAAC;EACD,IAAIM,OAAO,GAAGpB,IAAA,CAACP,eAAe;IAAC4B,eAAe,EAAEN;EAAoB,CAAE,CAAC;EAEvE,IAAIV,SAAS,EAAE;IACbe,OAAO,GAAGpB,IAAA,CAACJ,UAAU;MAAC0B,UAAU,EAAEjB,SAAU;MAACkB,UAAU,EAAEN;IAAgB,CAAE,CAAC;EAAC;EAC7E,IAAGR,UAAU,IAAIJ,SAAS,EAAC;IACzBe,OAAO,GAAGpB,IAAA,CAACH,cAAc;MAAC2B,WAAW,EAAEX,UAAW;MAACR,SAAS,EAAEA,SAAU;MAACoB,cAAc,EAAEN;IAAmB,CAAE,CAAC;EACjH;EAEJ,OACAnB,IAAA,CAACN,cAAc;IAEPgC,MAAM,EAAE,CAAC5B,MAAM,CAAC6B,YAAY,EAAC7B,MAAM,CAAC8B,WAAW,CAAG;IAClDC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAExBhC,IAAA,CAACT,eAAe;MAAC0C,MAAM,EAAEC,OAAO,0BAA0B,CAAE;MAACC,UAAU,EAAC,OAAO;MAC/EN,KAAK,EAAEC,MAAM,CAACC,SAAU;MAACK,UAAU,EAAE;QAACC,OAAO,EAAC;MAAI,CAAE;MAAAL,QAAA,EAC1DhC,IAAA,CAACR,YAAY;QAAEqC,KAAK,EAAEC,MAAM,CAACQ,UAAW;QAAAN,QAAA,EAAEZ;MAAO,CAAe;IAAC,CAC9C;EAAC,CAEF,CAAC;AAErB;AAEA,IAAMU,MAAM,GAAG3C,UAAU,CAACoD,MAAM,CAAC;EAC/BD,UAAU,EAAC;IAACE,IAAI,EAAC;EAAC,CAAC;EACnBT,SAAS,EAAE;IACTS,IAAI,EAAE;EACR;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}